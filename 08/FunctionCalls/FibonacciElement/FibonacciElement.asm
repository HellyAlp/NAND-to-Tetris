@256
D=A
@SP
M=D
// call Sys.init 0
@returnAddress.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@5
D = A+D
@SP
D = M-D
@ARG
M = D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(returnAddress.0)
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@FIRSTNEG1
D;JLT
@SP
A=M-1
D=M
@TRUE1
D;JLT
(SUB1)
@SP
A=M
D=M
@SP
A=M-1
D=M-D
@TRUE1
D;JLT
@FALSE1
0;JMP
(FIRSTNEG1)
@SP
A=M-1
D=M
@FALSE1
D;JGT
@SUB1
0;JMP
(FALSE1)
@SP
A=M-1
M=0
@END1
0;JMP
(TRUE1)
@SP
A=M-1
M=-1
@END1
0;JMP
(END1)
// if-goto IF_TRUE
@SP
M=M-1
A=M
D=M
@Main.fibonacci$IF_TRUE
D;JNE
// goto IF_FALSE
@Main.fibonacci$IF_FALSE
D=M
A=D
@Main.fibonacci$IF_FALSE
0;JMP
// Label IF_TRUE
(Main.fibonacci$IF_TRUE)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@endFrame
M=D
@5
D=A
@endFrame
D=M-D
@retAddr
A=D
D=M
@retAddr
M=D
@ARG
D=M
@SP
A=M                                                                       
M=D
@SP
M=M-1
A=M
D=M
@SP
A=M+1
A=M
M=D
@ARG
D=M
@SP
M=D+1
@1
D=A
@endFrame
D=M-D
@THAT
A=D
D=M
@THAT
M=D
@2
D=A
@endFrame
D=M-D
@THIS
A=D
D=M
@THIS
M=D
@3
D=A
@endFrame
D=M-D
@ARG
A=D
D=M
@ARG
M=D
@4
D=A
@endFrame
D=M-D
@LCL
A=D
D=M
@LCL
M=D
@retAddr
D=M
@i
A=D
0;JMP
// Label IF_FALSE
(Main.fibonacci$IF_FALSE)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
M=D
// call Main.fibonacci 1
@returnAddress.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@5
D = A+D
@SP
D = M-D
@ARG
M = D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(returnAddress.1)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
M=D
// call Main.fibonacci 1
@returnAddress.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@5
D = A+D
@SP
D = M-D
@ARG
M = D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(returnAddress.2)
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M+D
M=D
// return
@LCL
D=M
@endFrame
M=D
@5
D=A
@endFrame
D=M-D
@retAddr
A=D
D=M
@retAddr
M=D
@ARG
D=M
@SP
A=M                                                                       
M=D
@SP
M=M-1
A=M
D=M
@SP
A=M+1
A=M
M=D
@ARG
D=M
@SP
M=D+1
@1
D=A
@endFrame
D=M-D
@THAT
A=D
D=M
@THAT
M=D
@2
D=A
@endFrame
D=M-D
@THIS
A=D
D=M
@THIS
M=D
@3
D=A
@endFrame
D=M-D
@ARG
A=D
D=M
@ARG
M=D
@4
D=A
@endFrame
D=M-D
@LCL
A=D
D=M
@LCL
M=D
@retAddr
D=M
@i
A=D
0;JMP
// function Sys.init 0
(Sys.init)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
@returnAddress.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@5
D = A+D
@SP
D = M-D
@ARG
M = D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(returnAddress.3)
// Label WHILE
(Sys.init$WHILE)
// goto WHILE
@Sys.init$WHILE
D=M
A=D
@Sys.init$WHILE
0;JMP
