/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
	 
	 
	// first mux16
	And(a=instruction[15],b=instruction[5],out=andOPcode);
	Not(in=instruction[15],out=notOPcode);
	Or(a=andOPcode,b=notOPcode,out=Aout);
	Mux16(a=instruction,b=ALUout,sel=instruction[15],out=Mux16out1);

	// a=A-register
	ARegister(in=Mux16out1,load=Aout,out=AregisterOut,out[0..14]=addressM);
	
	// ALU & ExtendAlu
	ALU(x=DregisterOut,y=Mux16out2,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALU1out,zr=ALUzr1,ng=ALUng1);
	ExtendAlu(x=DregisterOut,y=Mux16out2,instruction=instruction[6..14],out=ExALUout,zr=ALUzr,ng=ALUng);
	Mux16(a=ALU1out,b=ExALUout,sel=instruction[15],out=ALUout);
	
	// D-register
	And(a=instruction[15],b=instruction[4],out=Dout);
	DRegister(in=ALUout,load=Dout,out=DregisterOut);
	
	// second mux16
	Mux16(a=AregisterOut,b=inM,sel=instruction[12],out=Mux16out2);
	And(a=instruction[15],b=instruction[3],out=AndOut,out=writeM);
	Mux16(a=false,b=ALUout,sel=AndOut,out=outM);
	
	// pc calculations
	And(a=instruction[1],b=ALUzr,out=outJ2);
	And(a=instruction[2],b=ALUng,out=outJ1);
	Or(a=outJ1,b=outJ2,out=or2);
	Not(in=ALUng,out=notNG);
	Not(in=ALUzr,out=notZR);
	And(a=instruction[0],b=notNG,out=outNG);
	And(a=notZR,b=outNG,out=outJ3);
	Or(a=or2,b=outJ3,out=or4);
	And(a=instruction[15],b=or4,out=loadOut);
	Not(in=loadOut,out=incOut);
	PC(in=AregisterOut,load=loadOut,reset=reset,inc=incOut,out[0..14]=pc);
	

	
	
	

	
}
