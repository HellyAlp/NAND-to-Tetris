// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M     input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Mux16(a=instruction,b=ALUout,sel=instruction[15],out=Mux16out1);
	//Nand(a=instruction[5],b=instruction[15],out=Aout);
	Not(in=instruction[15],out=notins15);
	And(a=instruction[15],b=instruction[5],out=and515);
	Or(a=and515,b=notins15,out=Aout);
	
	
	ARegister(in=Mux16out1,load=Aout,out=AregisterOut,out[0..14]=addressM);
	
	ALU(x=DregisterOut,y=Mux16out2,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout,zr=ALUzr,ng=ALUng);
	
	And(a=instruction[15],b=instruction[4],out=Dout);

	DRegister(in=ALUout,load=Dout,out=DregisterOut);
	Mux16(a=AregisterOut,b=inM,sel=instruction[12],out=Mux16out2);
	And(a=instruction[15],b=instruction[3],out=AndOut,out=writeM);
	Mux16(a=false,b=ALUout,sel=AndOut,out=outM);
	
	
//	Not(in=instruction[2],out=Not2);
	//Not(in=instruction[0],out=Not0);
	//Not(in=instruction[1],out=Not1);
	//And(a=Not0,b=Not1,out=AndNot);
	//And(a=AndNot,b=Not2,out=jmp);
	//Not(in=jmp,out=noJump);
	

	
	
	
//	And(a=instruction[2],b=instruction[1],out=AndOut2);
	//And(a=AndOut2,b=instruction[0],out=Jump);
	//Or(a=noJump,b=Jump,out=or1);
	
	
	And(a=instruction[1],b=ALUzr,out=outJ2);
	And(a=instruction[2],b=ALUng,out=outJ1);
	Or(a=outJ1,b=outJ2,out=or2);
	//Or(a=or2,b=or1,out=or3);



	Not(in=ALUng,out=notNG);
	Not(in=ALUzr,out=notZR);
	And(a=instruction[0],b=notNG,out=outNG);
	And(a=notZR,b=outNG,out=outJ3);
	Or(a=or2,b=outJ3,out=or4);
	And(a=instruction[15],b=or4,out=loadOut);

	Not(in=loadOut,out=incOut);



	PC(in=AregisterOut,load=loadOut,reset=reset,inc=incOut,out[0..14]=pc);
	

	
	
	

	
    
	
	
	
	
	
	
	
	
	
	
	
}